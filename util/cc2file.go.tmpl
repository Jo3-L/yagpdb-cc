{{/*
	This command sends your CC(s) code in a text file, rather than "plain" Discord messages, preserving Tabs, markdown, etc. 
	You can especify more than one ID or trigger, and bot will generate one file per input parameter. If none are provided, output will be CC list
	
	Recommended trigger: "cc2file"
	Trigger type: Command
	
	Usage: `-cc2file <ID or Trigger> [ID or Trigger] [ID or Trigger]...`. For example: `-cc2file 10 "te st" 23`
*/}}

{{/* CONFIGURATION AREA STARTS */}}
	{{$limitTo5CCs:= true}}				{{/*If `true`, bot will do that. Prevents flood in the chat*/}}
	{{$CCInfo_MessageContent:= true}}		{{/*If `true`, the info of each CC will be included in the message content*/}}
	{{$CCInfo_Attachment:= false}}			{{/*If `true`, the info of each CC will be included in the attached file*/}}
{{/* CONFIGURATION AREA ENDS */}}

{{define "sendLongMessage"}}	{{/*INPUT: cslice channelIDToSend textToSend stringSeparator*/}}
	{{$channelID:= index . 0}} {{$text:= index . 1}} {{$separator:= index . 2}}
	{{$outStr:= ""}}

	{{range (split $text $separator)}}
		{{- if gt (add (len $outStr) (len .)) 2000}}
			{{- sendMessage $channelID $outStr}}
			{{- $outStr = .}}
		{{- else}}
			{{- $outStr = joinStr $separator $outStr .}}
		{{- end -}}
	{{end}}

	{{sendMessage $channelID $outStr}}
{{end}}

{{define "sendLongMessageV2"}}	{{/*INPUT: sdict "channelID" $ID "text" $Text "separator" $Sepr*/}}
	{{$outStr:= ""}}

	{{range (split .text .separator)}}
		{{- if gt (add (len $outStr) (len .)) 2000}}
			{{- sendMessage .channelID $outStr}}
			{{- $outStr = .}}
		{{- else}}
			{{- $outStr = joinStr .separator $outStr .}}
		{{- end -}}
	{{end}}

	{{sendMessage .channelID $outStr}}
{{end}}


{{$args:= cslice}}
{{with .ExecData}}
	{{$args = .}}
{{else}}
	{{range .CmdArgs}}
		{{- if not (in $args .)}}
			{{- $args = $args.Append .}}
		{{- end}}
	{{- end}}
{{end}}
{{$numArgs:= len $args}}

{{$selectedArgs:= cslice}}
{{if gt $numArgs 5}}
	{{$selectedArgs = slice $args 0 5}}

	{{if $limitTo5CCs}}
		{{sendMessage nil "⚠️ WARNING: Only first 5 CCs will be processed"}}
	{{end}}
{{else}}
	{{$selectedArgs = $args}}
{{end}}

{{range $selectedArgs}}
	{{- $answer:= exec "cc" .}}
	{{- $answerLines:= split $answer "\n"}}
	{{- $extractedCode:= slice $answerLines 2 (sub (len $answerLines) 1)}}
	{{- $firstLine:= index $answerLines 0}}

	{{- if in $firstLine "here is a list of"}}
		{{- sendMessage nil (printf "❌ CC `%s` not found" .)}}
	{{- else if in $firstLine "More than 1 matched command"}}
		{{- $msj:= reReplace "``" (printf "`%s`: %s" . $answer) "`<Empty trigger specified>`"}}
		{{- template "sendLongMessage" (cslice nil $msj "\n")}}
	{{- else}}
		{{- $content:= ""}}
		{{- $attachment:= (joinStr "\n" $extractedCode)}}

		{{- if $CCInfo_MessageContent}}
			{{- $content = $firstLine}}
		{{- end}}

		{{- if $CCInfo_Attachment}}
			{{- $attachment = printf "{{/* CC INFO: %s */}}\n\n%s" $firstLine $attachment}}
		{{- end}}

		{{- sendMessage nil (complexMessage
			"content" $content
			"file" $attachment
		)}}
	{{- end}}

	{{- sleep 1}}
{{else}}
	{{template "sendLongMessage" (cslice nil (exec "cc") "\n")}}
{{end}}

{{if and (not $limitTo5CCs) (gt $numArgs 5)}}
	{{scheduleUniqueCC .CCID nil 1 "cc2file - remaining args" (slice $args 5 $numArgs)}}
{{end}}
