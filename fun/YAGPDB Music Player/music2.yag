{{/*
	Name: YAGPDB Music Player
	Author: SpecialEliteSNP <https://github.com/SpecialEliteSNP> / Engineer152 <https://github.com/Engineer152>
	License: GNU
	Website: https://docs.yagpdb-mp.tk/
*/}}

{{$botID:=204255221017214977}}{{$sb:=execAdmin "sb"}}{{$songs:=cslice}}{{range reFindAllSubmatches `\x60.+?\x60` (slice $sb 29 (sub (len $sb) 36))}}{{with reFindAllSubmatches `\A\x60(.+?)\s-\s(.+?)\s\[(.+?)\]\x60\z` (index . 0)}}{{$songs =$songs.Append (sdict "artist" (index . 0 1) "length" (index . 0 3) "title" (index . 0 2))}}{{end}}{{end}}
{{$q:=cslice}}{{with (dbGet 20 "queue").Value}}{{$q =$q.AppendSlice .}}{{end}}{{$nq:=cslice}}{{$nnq:=cslice}}{{- range $i,$e:=$q}}{{if $i}}{{$nq =$nq.Append $e}}{{end}}{{if gt $i 1}}{{$nnq =$nnq.Append $e}}{{end}}{{end}}
{{$yagVC:=0}}{{$userVC:=0}}{{$usersVC:=cslice}}{{range .Guild.VoiceStates}}{{if eq .UserID $botID}}{{$yagVC =.ChannelID}}{{range $.Guild.VoiceStates}}{{if eq .ChannelID $yagVC}}{{$usersVC =$usersVC.Append .}}{{end}}{{end}}{{else if eq .UserID $.User.ID}}{{$userVC =.ChannelID}}{{end}}{{end}}
{{$a:=.ExecData}}
{{if eq $a.t "h"}}
  {{$l := cslice
    (cslice "start" (cslice "begin" "b") "Starts the music playback") (cslice "stop" (cslice "end" "e") "Stops the music playback") (cslice "play" (cslice "p") "Queues a song with the given name" "<query>") (cslice "skip" (cslice "voteskip" "next" "s") "Votes to skip the current playing song") (cslice "forceskip" (cslice "fs" "fskip") "Skips the current playing song immediately" "[number]") (cslice "replay" (cslice) "Resets the progress of the current song") (cslice "random" (cslice "r") "Plays a random song from the soundboard") (cslice "playall" (cslice "pa") "Plays all songs from the soundboard") (cslice "playtop" (cslice "pt" "ptop") "Adds a song with the given name **on the top of the queue**" "<query>") (cslice "playskip" (cslice "ps" "pskip" "playnow" "pn") "Skips the current song and plays the song you requested" "<query>")
    (cslice "queue" (cslice "q") "Shows queued songs, based on page #" "[page]") (cslice "remove" (cslice "rm") "Removes a certain entry from the queue" "<number(s)>") (cslice "clear" (cslice "cl") "Clears all songs from queue (from certain users)" "[user]") (cslice "shuffle" (cslice) "Shuffles the entire queue")
    (cslice "help" (cslice "h") "Shows you info like this in a nice overview. Even with usage if the action has any.\n`<>` means something is required, `[]` means it's optional." "[action]") (cslice "list" (cslice "l") "Lists all available music from the soundboard" "[page]") (cslice "search" (cslice "find") "Searches in the Soundboard for songs that match your query and returns the first 10 results" "<query>") (cslice "nowplaying" (cslice "np") "Shows what song the bot is currently playing") (cslice "grab" (cslice "save" "yoink") "Saves the current playing song to your Direct Messages")}}
  {{$emb:=sdict}}{{$e:=execAdmin "prefix"}}{{$p:=reReplace `[\.\[\]\-\?\!\\\*\{\}\(\)\|\+\$\^]` (slice $e (add 15 (len (str $.Guild.ID))) (sub (len $e) 1)) `\$0`}}{{if eq $a.c "all"}}{{$sc:=""}}{{$qc:=""}}{{$ic:=""}}{{range $i,$e:=$l}}{{if le $i 8}}{{$sc = print $sc "\n" (index $e 0)}}{{else if le $i 13}}{{$qc = print $qc "\n" (index $e 0)}}{{else}}{{$ic = print $ic "\n" (index $e 0)}}{{end}}{{end}}{{$emb = sdict "title" "üéº Music commands" "color" (randInt 16777217) "description" (print "**These commands must be proceded with** _" $p "music_") "fields" (cslice (sdict "name" "Song:" "value" $sc "inline" true) (sdict "name" "Queue:" "value" $qc "inline" true) (sdict "name" "Info:" "value" $ic "inline" true))}}{{else}}{{range $i,$e:=$l}}{{if in ((cslice (index $e 0)).AppendSlice (index $e 1)) $a.c}}{{$c:="Info"}}{{if le $i 8}}{{$c ="Song"}}{{else if le $i 13}}{{$c ="Queue"}}{{end}}{{$emb.Set "fields" (cslice (sdict "name" "Category:" "value" $c "inline" true))}}{{$emb.Set "title" (title (index $e 0))}}{{$t:=""}}{{range (index $e 1)}}{{$t = print $t ", " .}}{{else}}{{$t = ", None"}}{{end}}{{$emb.Set "fields" ($emb.fields.Append (sdict "name" "Aliases:" "value" (slice $t 2) "inline" true))}}{{$emb.Set "description" (index $e 2)}}{{if gt (len $e) 3}}{{$emb.Set "fields" ($emb.fields.Append (sdict "name" "Usage:" "value" (print $p "music " (index $e 0) " " (index $e 3))))}}{{end}}{{end}}{{end}}{{end}}{{if $emb.title}}{{sendMessage nil (cembed $emb)}}{{else}}‚ùå **Couldn't find command `{{$a.c}}`!**{{end}}
{{else if eq $a.t "a"}}{{$s:=index $a.c 1}}{{$t:=len $s}}{{$pages:=toInt (roundCeil (div (toFloat $t) 10))}}{{$page:=toInt (index $a.c 2)}}{{if not (or $s $pages)}}‚ùå **Queue is empty!**{{else if and (gt $page 0) (le $page $pages)}}{{$n:=sub (mult $page 10) 10}}{{$b:=$n}}{{$l:=currentTime}}{{$d:=""}}{{range $i,$e:=$s}}{{- $l =$l.Add (toDuration $e.length) -}}{{- if and (ge $i $b) (lt $i (add $b 10)) -}}{{- $n =add $n 1 -}}{{- $r:="" -}}{{- with $e.req -}}{{- $r =print " <@" . ">" -}}{{- end -}}{{- $d =printf "%s\n\n`%d.` [%s - %s](https://music.youtube.com/search?q=%s+%s) **[%s]**%s" $d $n $e.artist $e.title (urlquery (lower $e.title)) (urlquery (lower $e.artist)) $e.length $r -}}{{- end -}}{{end}}{{$footer:=print " ‚Ä¢ " (($l.Sub currentTime).Round .TimeSecond)}}{{$z:="song"}}{{if ne $t 1}}{{$z =print $z "s"}}{{end}}{{$footer =print $t " " $z $footer}}{{$title:="üéµ Available songs"}}{{if ne $page $pages}}{{$footer =print "Page " $page "/" $pages " ‚Ä¢ " $footer}}{{end}}{{if index $a.c 0}}{{$title ="üìÉ Queue"}}{{end}}{{sendMessage nil (cembed "title" $title "description" $d "color" 3324667 "thumbnail" (sdict "url" "https://raw.githubusercontent.com/iamcal/emoji-data/master/img-google-136/1f3b5.png") "footer" (sdict "text" $footer))}}{{else}}‚ùå **That page doesn't exist!**{{end}}
{{else if eq $a.t "f"}}{{$f:=cslice}}{{range $i,$e:=$songs}}{{- if reFind (print `(?i)` ((split (reReplace `[[\]\\.?^${}()|*+]` $a.c `\$0`) "`"|joinStr `\x60`))) $e.title -}}{{- $f =$f.Append (sdict "artist" $e.artist "length" $e.length "title" $e.title "number" $i) -}}{{- end -}}{{end}}{{with $f}}{{$emb:=sdict "title" "üéµ Songs found" "color" 3324667}}{{$d:=""}}{{range $i,$e:=.}}{{if lt $i 10}}{{$d =printf "%s\n\n`%d.` [%s - %s](https://music.youtube.com/search?q=%s+%s) **[%s]**" $d (add $e.number 1) $e.artist $e.title (urlquery (lower $e.title)) (urlquery (lower $e.artist)) $e.length}}{{end}}{{end}}{{if ge (len $f) 10}}{{$d =print $d "\n\n\n**Only showing the first 10 results**"}}{{end}}{{$emb.Set "description" $d}}{{sendMessage nil (cembed $emb)}}{{else}}‚ùå **No songs found with `{{$a.c}}`!**{{end}}
{{else if eq $a.t "c"}}{{$nc:="‚ùå **Nothing cleared!**"}}{{$f:=cslice}}{{if $yagVC}}{{$f =cslice (index $q 0)}}{{end}}{{if index $a.c 0}}{{$u:=0}}{{with index $a.c 1}}{{$u =(index . 0).ID}}{{end}}{{with or $u (toInt (index $a.c 0))}}{{$u =.}}{{$t:=$q}}{{if $yagVC}}{{$t =$nq}}{{end}}{{$nnq:=cslice}}{{range $t}}{{if ne .req $u}}{{$nnq =$nnq.Append .}}{{end}}{{end}}{{if lt (len $nnq) (len $t)}}{{dbSet 20 "queue" ($f.AppendSlice $nnq)}}üóë **Queue cleared for <@{{$u}}>!**{{else}}{{$nc}}{{end}}{{else}}{{$nc}}{{end}}{{else}}{{$qc:="üóë **Queue cleared!**"}}{{if $yagVC}}{{if $nq}}{{dbSet 20 "queue" (cslice (index $q 0))}}{{$qc}}{{else}}{{$nc}}{{end}}{{else}}{{dbSet 20 "queue" $f}}{{$qc}}{{end}}{{end}}
{{end}}